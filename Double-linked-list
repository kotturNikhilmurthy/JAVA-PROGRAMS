class DoublyLinkedList {
    // Node definition
    class Node {
        int data;
        Node prev;
        Node next;

        Node(int data) {
            this.data = data;
            this.prev = null;
            this.next = null;
        }
    }

    private Node head; // head of the list

    // Insert at end
    public void insert(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
            return;
        }

        Node current = head;
        while (current.next != null) {
            current = current.next;
        }

        current.next = newNode;
        newNode.prev = current;
    }

    // Delete first occurrence of a key
    public void delete(int key) {
        if (head == null) {
            System.out.println("List is empty!");
            return;
        }

        Node current = head;

        // If head node itself holds the key
        if (current.data == key) {
            head = current.next;
            if (head != null) {
                head.prev = null;
            }
            return;
        }

        while (current != null && current.data != key) {
            current = current.next;
        }

        if (current == null) {
            System.out.println("Element " + key + " not found.");
        } else {
            // unlink current node
            if (current.next != null) {
                current.next.prev = current.prev;
            }
            if (current.prev != null) {
                current.prev.next = current.next;
            }
        }
    }

    // Display list forward
    public void displayForward() {
        Node current = head;
        if (current == null) {
            System.out.println("List is empty.");
            return;
        }

        System.out.print("Forward: ");
        while (current != null) {
            System.out.print(current.data + " <-> ");
            if (current.next == null) break;
            current = current.next;
        }
        System.out.println("null");
    }

    // Display list backward (from tail to head)
    public void displayBackward() {
        Node current = head;
        if (current == null) {
            System.out.println("List is empty.");
            return;
        }

        // go to last node
        while (current.next != null) {
            current = current.next;
        }

        System.out.print("Backward: ");
        while (current != null) {
            System.out.print(current.data + " <-> ");
            current = current.prev;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        DoublyLinkedList list = new DoublyLinkedList();

        list.insert(10);
        list.insert(20);
        list.insert(30);
        list.displayForward();   // Forward: 10 <-> 20 <-> 30 <-> null
        list.displayBackward();  // Backward: 30 <-> 20 <-> 10 <-> null

        list.delete(20);
        list.displayForward();   // Forward: 10 <-> 30 <-> null
        list.displayBackward();  // Backward: 30 <-> 10 <-> null

        list.insert(40);
        list.displayForward();   // Forward: 10 <-> 30 <-> 40 <-> null
        list.displayBackward();  // Backward: 40 <-> 30 <-> 10 <-> null
    }
}
